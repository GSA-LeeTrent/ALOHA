package gov.gsa.ocfo.aloha.model.entity.leave;

import java.io.Serializable;
import javax.persistence.*;


/**
 * The persistent class for the LR_STATUS database table.
 * 
 */
@Entity
@Table(name="LR_STATUS", schema="ALOHA")
@NamedQueries({
	@NamedQuery(name="findByLeaveStatusCode",
	        	query="SELECT row FROM LeaveStatus row WHERE row.code = :leaveStatusCode"),
	@NamedQuery(name="retrieveAllLeaveStatuses", 
				query="SELECT row FROM LeaveStatus row where row.displayOrder <> 0 ORDER BY row.displayOrder ASC")	        	
})
public class 





































implements Serializable {
	private static final long serialVersionUID = -4579632860736148815L;

	public interface QueryNames{
		public static final String FIND_BY_CODE = "findByLeaveStatusCode";
		public static final String RETRIEVE_ALL = "retrieveAllLeaveStatuses";
	}
	public interface QueryParamNames {
		public static final String FIND_BY_CODE = "leaveStatusCode";	
	}
	public interface CodeValues {
		public static final String NONE 			= "NONE";
		public static final String DRAFT 			= "DRAFT";
		public static final String SUBMITTED 		= "SUBMITTED";
		public static final String CANCELLED 		= "CANCELLED";
		public static final String APPROVED			= "APPROVED";
		public static final String DENIED 			= "DENIED";
		public static final String PEND_WITHDRAW 	= "PEND_WITHDRAW";
		public static final String WITHDRAWN 		= "WITHDRAWN";
		public static final String PEND_AMEND  		= "PEND_AMEND";		
		public static final String AMENDED    		= "AMENDED";
	}

	public interface LabelValues {
		public static final String NONE 			= "None";
		public static final String DRAFT 			= "Draft";
		public static final String SUBMITTED 		= "Submitted";
		public static final String CANCELLED 		= "Cancelled";
		public static final String APPROVED			= "Approved";
		public static final String DENIED 			= "Denied";
		public static final String PEND_WITHDRAW 	= "Pending Withdrawal";
		public static final String WITHDRAWN 		= "Withdrawn";
		public static final String PEND_AMEND  		= "Pending Amendment";		
		public static final String AMENDED    		= "Amended";
	}

	public static final String[] ApproverCodeSortOrder = {	CodeValues.SUBMITTED, 
															CodeValues.PEND_AMEND, 
															CodeValues.PEND_WITHDRAW, 
															CodeValues.APPROVED, 
															CodeValues.DENIED,
															CodeValues.AMENDED,
															CodeValues.WITHDRAWN,
															CodeValues.CANCELLED
														};
	@Id
	@Column(name="LR_STATUS_ID", unique=true, nullable=false, precision=10)
	private long id;

	@Column(name="CODE", unique=true, nullable=false, length=25)
	private String code;

	@Column(name="LABEL", nullable=false, length=25)
	private String label;

	@Column(name="DESCRIPTION", nullable=false, length=100)
	private String description;

	@Column(name="DISPLAY_ORDER")
	private int displayOrder;
	
    public LeaveStatus() {
    }

	public long getId() {
		return this.id;
	}

	public void setId(long id) {
		this.id = id;
	}

	public String getCode() {
		return this.code;
	}

	public void setCode(String code) {
		this.code = code;
	}

	public String getLabel() {
		return label;
	}

	public void setLabel(String label) {
		this.label = label;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public int getDisplayOrder() {
		return displayOrder;
	}

	public void setDisplayOrder(int displayOrder) {
		this.displayOrder = displayOrder;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((code == null) ? 0 : code.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		LeaveStatus other = (LeaveStatus) obj;
		if (code == null) {
			if (other.code != null)
				return false;
		} else if (!code.equals(other.code))
			return false;
		return true;
	}

	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
		builder.append("LeaveStatus [id=");
		builder.append(id);
		builder.append(", code=");
		builder.append(code);
		builder.append(", label=");
		builder.append(label);
		builder.append(", description=");
		builder.append(description);
		builder.append(", displayOrder=");
		builder.append(displayOrder);
		builder.append("]");
		return builder.toString();
	}
}